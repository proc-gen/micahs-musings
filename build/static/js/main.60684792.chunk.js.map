{"version":3,"sources":["site/router/color-mode-switcher.tsx","site/router/left-nav.tsx","site/router/layout-main.tsx","lib/components/link-button.tsx","lib/components/thumbnail.tsx","site/home/images/molten-teapot.jpg","site/home/images/multiple-noise-terrain.jpg","site/home/images/maze-generator.png","site/home/images/3-d-maze.png","site/home/home.tsx","site/about-me/about-me.tsx","site/programming/programming.tsx","site/programming/mazes/overview/mazes.tsx","site/programming/terrain-generation/terrain-generation.tsx","site/writing/writing.tsx","lib/components/canvas.tsx","site/programming/mazes/generator/components/generator-properties.tsx","site/programming/mazes/generator/components/binary-tree-properties.tsx","site/programming/mazes/generator/components/sidewinder-properties.tsx","lib/mazes/image-utils/rgba.ts","lib/mazes/image-utils/image.ts","lib/mazes/maze-parts/wall.ts","lib/mazes/maze-parts/cell.ts","lib/mazes/maze-parts/grid.ts","lib/mazes/utils/random.ts","lib/mazes/generators/generator.ts","lib/mazes/generators/aldous-broder.ts","lib/mazes/generators/binary-tree.ts","lib/mazes/generators/growing-tree.ts","lib/mazes/generators/hunt-and-kill.ts","lib/mazes/generators/kruskal.ts","lib/mazes/generators/prim.ts","lib/mazes/generators/recursive-backtracker.ts","lib/mazes/generators/sidewinder.ts","lib/mazes/generators/wilson.ts","lib/mazes/utils/math.ts","lib/mazes/generators/eller.ts","lib/mazes/generators/recursive-subdivision.ts","site/programming/mazes/generator/generator.tsx","site/programming/mazes/algorithms/algorithms.tsx","site/router/router-main.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","LeftNav","align","allowMultiple","as","ReactLink","to","w","LayoutMain","children","textAlign","paddingBottom","rows","minChildWidth","paddingLeft","justifySelf","minH","p","templateColumns","colSpan","LinkButton","href","Thumbnail","useDisclosure","isOpen","onOpen","onClose","src","source","alt","altText","_hover","border","transition","Home","columns","spacing","padding","MoltenTeapot","NoiseTerrain","MazeGenerator","SpaceMaze","AboutMe","Programming","Mazes","maxW","isExternal","TerrainGeneration","Writing","Canvas","id","imgData","canvasRef","React","useRef","useState","context","setContext","useEffect","current","renderCtx","getContext","undefined","putImageData","ref","width","height","GeneratorProperties","state","handleGeneratorChange","bind","handleSeedChange","handleWidthChange","handleHeightChange","event","this","handleChange","parseInt","currentTarget","value","name","placeHolder","data","generator","onChange","placeholder","seed","Component","BinaryTreeProperties","handleDirectionsChange","handleChanceVerticalChange","direction","chanceVertical","SidewinderProperties","handleWindDirectionChange","handleChanceWindChange","handleSideDirectionChange","sideDirection","windDirection","chanceWind","RGBA","r","g","b","a","Black","White","Image","x","y","c","i","j","SetPixel","GetPixel","newData","length","ImageData","Wall","isWall","isStairsDown","isStairsUp","weight","Cell","numCellSides","visited","adjacentCells","walls","set","masked","overCell","underCell","wall","push","canTunnel","CanTunnelDirection","retVal","IsFlat","dimension","wallColor","floorColor","paintColor","ColumnExists","nextCell","toString","Grid","cells","SetWall","Math","max","iOffset","jOffset","floor","cellImgData","Display","SetPixels","Transpose","FlipOverX","Random","mulberry32","min","t","imul","GeneratorData","grid","weave","cullDeadEnds","Generator","baseProps","random","InitializeGrid","Generate","Weave","RemoveDeadEnds","currentCell","AldousBroderData","AldousBroder","adjacentCount","mapCells","GetInt","filter","MergeCells","some","BinaryTreeData","BinaryTree","verticalCell","horizontalCell","GrowingTreeData","GrowingTree","pickCount","usedCells","HuntAndKillData","HuntAndKill","KruskalData","Kruskal","currentWeight","nextSetNumber","k","GetIntInRange","GetWeightDirection","GetCellDirection","filterSet","mapSet","forEach","PrimData","Prim","sort","compareWeights","indexOf","RecursiveBacktrackerData","RecursiveBacktracker","currentSet","pop","SidewinderData","Sidewinder","cellRun","randResult","iStart","iMax","iStep","jStart","jMax","jStep","WilsonData","Wilson","currentLoop","unvisitedCount","MathUtils","Infinity","EllerData","Eller","row","finalRow","currentRow","currentRowSet","currentRowSets","MaxY","MinY","rowMovedSouth","RecursiveSubdivisionData","RecursiveSubdivision","startX","startY","startWidth","startHeight","MinX","MaxX","divide","column","divideHorizontal","divideVertical","divideSouthOf","affectedCells","compareElement","passageCell","affectedCellSection","divideEastOf","key","generate","maze","binaryTree","sidewinder","aldousBroder","wilson","huntAndKill","recursiveBacktracker","kruskal","prim","growingTree","eller","recursiveSubdivision","generatorData","RunGenerator","setState","handleGeneratorDataChange","handleBinaryTreeChange","handleSidewinderChange","fieldName","retElement","getGeneratorPropertiesTabName","getGeneratorSpecificPropertiesElement","maxWidth","maxHeight","overflow","Algorithms","RouterMain","exact","path","component","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60684792.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Link,\r\n  SimpleGrid,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport { Link as ReactLink } from 'react-router-dom';\r\n\r\nexport interface ILeftNavProps {}\r\n\r\nexport const LeftNav: React.FC<ILeftNavProps> = () => {\r\n  return (\r\n    <SimpleGrid>\r\n      <VStack align=\"stretch\">\r\n        <Accordion allowMultiple>\r\n          <AccordionItem>\r\n            <AccordionButton>\r\n              <Link as={ReactLink} to=\"/\">\r\n                Home\r\n              </Link>\r\n            </AccordionButton>\r\n          </AccordionItem>\r\n          <AccordionItem>\r\n            <AccordionButton w=\"100%\">\r\n              Programming\r\n              <AccordionIcon />\r\n            </AccordionButton>\r\n            <AccordionPanel w=\"100%\">\r\n              <AccordionItem>\r\n                <AccordionButton>\r\n                  <Link as={ReactLink} to=\"/programming\">\r\n                    Overview\r\n                  </Link>\r\n                </AccordionButton>\r\n              </AccordionItem>\r\n              <AccordionItem>\r\n                <AccordionButton w=\"100%\">\r\n                  Mazes\r\n                  <AccordionIcon />\r\n                </AccordionButton>\r\n                <AccordionPanel w=\"100%\">\r\n                  <AccordionItem>\r\n                    <AccordionButton>\r\n                      <Link as={ReactLink} to=\"/programming/mazes\">\r\n                        Overview\r\n                      </Link>\r\n                    </AccordionButton>\r\n                  </AccordionItem>\r\n                  <AccordionItem>\r\n                    <AccordionButton>\r\n                      <Link as={ReactLink} to=\"/programming/mazes/generator\">\r\n                        Generator\r\n                      </Link>\r\n                    </AccordionButton>\r\n                  </AccordionItem>\r\n                  <AccordionItem>\r\n                    <AccordionButton>\r\n                      <Link as={ReactLink} to=\"/programming/mazes/algorithms\">\r\n                        Algorithms\r\n                      </Link>\r\n                    </AccordionButton>\r\n                  </AccordionItem>\r\n                </AccordionPanel>\r\n              </AccordionItem>\r\n              <AccordionItem>\r\n                <AccordionButton w=\"100%\">\r\n                  <Link as={ReactLink} to=\"/programming/terrain-generation\">\r\n                    Terrain Generation\r\n                  </Link>\r\n                </AccordionButton>\r\n              </AccordionItem>\r\n            </AccordionPanel>\r\n          </AccordionItem>\r\n          <AccordionItem>\r\n            <AccordionButton w=\"100%\">\r\n              Writing\r\n              <AccordionIcon />\r\n            </AccordionButton>\r\n            <AccordionPanel w=\"100%\">\r\n              <AccordionButton>\r\n                <Link as={ReactLink} to=\"/writing\" w=\"100%\">\r\n                  Overview\r\n                </Link>\r\n              </AccordionButton>\r\n            </AccordionPanel>\r\n          </AccordionItem>\r\n          <AccordionItem>\r\n            <AccordionButton>\r\n              <Link as={ReactLink} to=\"/about-me\">\r\n                About Me\r\n              </Link>\r\n            </AccordionButton>\r\n          </AccordionItem>\r\n        </Accordion>\r\n      </VStack>\r\n    </SimpleGrid>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, Grid, GridItem, Heading, SimpleGrid } from '@chakra-ui/react';\r\n\r\nimport { ColorModeSwitcher } from './color-mode-switcher';\r\nimport { LeftNav } from './left-nav';\r\n\r\nexport const LayoutMain: React.FC = ({ children }) => {\r\n  return (\r\n    <Box textAlign=\"center\" fontSize=\"xl\">\r\n      <SimpleGrid paddingBottom=\"1em\" rows={1} minChildWidth=\"5em\">\r\n        <GridItem textAlign=\"left\">\r\n          <Heading size=\"xl\" paddingLeft=\".5em\">\r\n            Micah's Musings\r\n          </Heading>\r\n        </GridItem>\r\n        <GridItem textAlign=\"right\">\r\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n        </GridItem>\r\n      </SimpleGrid>\r\n\r\n      <Grid minH=\"100vh\" p={3} templateColumns=\"repeat(12, 1fr)\">\r\n        <GridItem colSpan={2}>\r\n          <LeftNav />\r\n        </GridItem>\r\n        <GridItem colSpan={10}>{children}</GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Button, Link } from '@chakra-ui/react';\r\nimport { Link as ReactLink } from 'react-router-dom';\r\n\r\nexport interface ILinkButtonProps {\r\n  href: string;\r\n  text: string;\r\n}\r\n\r\nexport const LinkButton: React.FC<ILinkButtonProps> = (props) => {\r\n  return (\r\n    <Link as={ReactLink} to={props.href}>\r\n      <Button>{props.text}</Button>\r\n    </Link>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Image,\r\n  ImageProps,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalCloseButton,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\n\r\nexport interface IThumbnailProps extends ImageProps {\r\n  source: string;\r\n  altText: string;\r\n}\r\n\r\nexport const Thumbnail: React.FC<IThumbnailProps> = ({ ...props }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        src={props.source}\r\n        alt={props.altText}\r\n        onClick={onOpen}\r\n        _hover={{ border: 'solid 2px grey', transition: '0.1s' }}\r\n        props\r\n      />\r\n      <Modal isOpen={isOpen} onClose={onClose} size=\"full\">\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{props.altText}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Image src={props.source} alt={props.altText} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/molten-teapot.7f5a8561.jpg\";","export default __webpack_public_path__ + \"static/media/multiple-noise-terrain.858abf92.jpg\";","export default __webpack_public_path__ + \"static/media/maze-generator.87da6afb.png\";","export default __webpack_public_path__ + \"static/media/3-d-maze.faf6ae04.png\";","import React from 'react';\r\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/react';\r\n\r\nimport { LinkButton } from '../../lib/components/link-button';\r\nimport { Thumbnail } from '../../lib/components/thumbnail';\r\n\r\nimport MoltenTeapot from './images/molten-teapot.jpg';\r\nimport NoiseTerrain from './images/multiple-noise-terrain.jpg';\r\nimport MazeGenerator from './images/maze-generator.png';\r\nimport SpaceMaze from './images/3-d-maze.png';\r\n\r\nexport const Home: React.FC = () => {\r\n  return (\r\n    <>\r\n      <SimpleGrid columns={2} spacing=\"5em\" padding=\"1em\">\r\n        <Thumbnail source={MoltenTeapot} altText=\"Molten Teapot\" />\r\n        <Thumbnail source={NoiseTerrain} altText=\"Terrain Generation\" />\r\n      </SimpleGrid>\r\n      <Box padding=\"1em\">\r\n        <Heading paddingBottom=\"0.5em\">Welcome!</Heading>\r\n        <Text>\r\n          I made this website to share things that I've worked on because\r\n          they're cool, interesting, or just meant to make you think. Enjoy!\r\n        </Text>\r\n      </Box>\r\n      <SimpleGrid columns={3} spacing=\"1em\" padding=\"1em\">\r\n        <LinkButton href=\"/programming\" text=\"Programming\" />\r\n        <LinkButton href=\"/writing\" text=\"Writing\" />\r\n        <LinkButton href=\"/about-me\" text=\"About Me\" />\r\n      </SimpleGrid>\r\n      <SimpleGrid columns={2} spacing=\"5em\" padding=\"1em\">\r\n        <Thumbnail source={MazeGenerator} altText=\"Maze Generator\" />\r\n        <Thumbnail source={SpaceMaze} altText=\"3D Maze\" />\r\n      </SimpleGrid>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nexport const AboutMe: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">About Me</Heading>\r\n      <Text>Texty text.</Text>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nexport const Programming: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">Programming</Heading>\r\n      <Text>Texty text.</Text>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Heading,\r\n  Link,\r\n  SimpleGrid,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { LinkButton } from '../../../../lib/components/link-button';\r\n\r\nexport const Mazes: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">Mazes - Overview</Heading>\r\n      <SimpleGrid columns={2} spacing=\"1em\" padding=\"1em\">\r\n        <LinkButton href=\"/programming/mazes/generator\" text=\"Generator\" />\r\n        <LinkButton href=\"/programming/mazes/algorithms\" text=\"Algorithms\" />\r\n      </SimpleGrid>\r\n      <Container maxW=\"container.lg\" padding=\"1em\">\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          Around the time of June 2020, I was perusing through Amazon looking\r\n          for new books to read whether they were for something to learn or just\r\n          for enjoyment. I ended up coming across{' '}\r\n          <Link\r\n            href=\"https://www.amazon.com/Mazes-Programmers-Twisty-Little-Passages/dp/1680500554\"\r\n            isExternal\r\n          >\r\n            <u>Mazes for Programmers: Code Your Own Twisty Little Passages</u>\r\n          </Link>{' '}\r\n          by Jamis Buck and thought it would be something cool to try out.\r\n        </Text>\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          At first, I was a little turned off that all the provided code was\r\n          written in Ruby. As many reviews stated, this was an annoyance to them\r\n          as well. But, that actually ended up making it more fun for me\r\n          overall. Not only was I learning the algorithms described by the\r\n          author to generate mazes, I was also challenging my problem solving\r\n          skills by transferring the provided code into my current language of\r\n          choice, C#.\r\n        </Text>\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          It didn't take long before I was spending time taking the mazes and\r\n          putting them in 3D so that I could feel like I was walking through\r\n          games of my childhood like{' '}\r\n          <Link href=\"http://advsys.net/ken/klab.htm\" isExternal>\r\n            <u>Ken's Labyrinth</u>\r\n          </Link>{' '}\r\n          and{' '}\r\n          <Link href=\"https://www.dgray.com/n3dpage.htm\" isExternal>\r\n            <u>Nitemare 3D</u>\r\n          </Link>\r\n          . That iteration didn't make it much further than a console interface\r\n          to setup the maze and then going into fullscreen mode. Still, it was\r\n          fun to be able to make something and play it, which is something I\r\n          hadn't done in several years.\r\n        </Text>\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          After inevitably getting bogged down trying to do fancy things with\r\n          OpenGL and GLSL shaders, I took a few months away from the project\r\n          before beginning to work on a WinForms version of the application.\r\n          That was another learning experience, because I hadn't made a WinForms\r\n          application for anything since the first half of high school. Compared\r\n          to the VB 6 code I had worked on it was a breeze in .Net Core. This\r\n          version of the generator allowed for all the settings as the first\r\n          version in addition to separating a map out into multiple regions. The\r\n          goal behind that was to allow for more complex generation so that it\r\n          could possibly be used for a rogue-like game.\r\n        </Text>\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          Jumping ahead to July 2021, the current goal is to port the current\r\n          version of the C# library I put together into Typescript. So far, the\r\n          hardest part has been editing images pixel by pixel in the same way\r\n          allowed by System.Drawing.Bitmap in C# while also trying to respect\r\n          how data is supposed to flow in a React application.\r\n        </Text>\r\n        <Text textAlign=\"left\" paddingBottom=\"1em\">\r\n          If you've stuck around this long, you should jump to either the{' '}\r\n          <Link href=\"/programming/mazes/generator\">\r\n            <u>Generator</u>\r\n          </Link>{' '}\r\n          to play around with all sorts of settings to create your own mazes, or\r\n          you can head off to the{' '}\r\n          <Link href=\"/programming/mazes/generator\">\r\n            <u>Algorithms</u>\r\n          </Link>{' '}\r\n          section where I give a brief explanation of each generator implemented\r\n          and some other pieces of the code. Enjoy!\r\n        </Text>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nexport const TerrainGeneration: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">Terrain Generation</Heading>\r\n      <Text>Texty text.</Text>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nexport const Writing: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">Writing</Heading>\r\n      <Text>Texty text.</Text>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ICanvasProps {\r\n  id: string;\r\n  imgData: ImageData;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport const Canvas: React.FC<ICanvasProps> = ({ id, imgData, ...props }) => {\r\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\r\n  const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(\r\n    null\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const renderCtx = canvasRef.current.getContext('2d');\r\n\r\n      if (renderCtx) {\r\n        if (imgData !== undefined) {\r\n          renderCtx.putImageData(imgData, 0, 0);\r\n        }\r\n        setContext(renderCtx);\r\n      }\r\n    }\r\n  }, [context, imgData]);\r\n\r\n  return (\r\n    <canvas\r\n      id={id}\r\n      ref={canvasRef}\r\n      width={props.width || imgData.width}\r\n      height={props.height || imgData.height}\r\n    ></canvas>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  SimpleGrid,\r\n} from '@chakra-ui/react';\r\n\r\nimport { GeneratorData } from '../../../../../lib/mazes';\r\n\r\nexport interface IGeneratorProps {\r\n  data: GeneratorData;\r\n  handleChange: (fieldName: string, value: number) => void;\r\n}\r\n\r\nexport interface IGeneratorState {}\r\n\r\nexport class GeneratorProperties extends React.Component<\r\n  IGeneratorProps,\r\n  IGeneratorState\r\n> {\r\n  constructor(props: IGeneratorProps) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.handleGeneratorChange = this.handleGeneratorChange.bind(this);\r\n    this.handleSeedChange = this.handleSeedChange.bind(this);\r\n    this.handleWidthChange = this.handleWidthChange.bind(this);\r\n    this.handleHeightChange = this.handleHeightChange.bind(this);\r\n  }\r\n\r\n  handleGeneratorChange(event: React.FormEvent<HTMLSelectElement>) {\r\n    this.props.handleChange('generator', parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  handleSeedChange(event: React.FormEvent<HTMLInputElement>) {\r\n    this.props.handleChange('seed', parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  handleWidthChange(event: React.FormEvent<HTMLInputElement>) {\r\n    this.props.handleChange('width', parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  handleHeightChange(event: React.FormEvent<HTMLInputElement>) {\r\n    this.props.handleChange('height', parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SimpleGrid columns={2} spacing=\"1em\" paddingBottom=\"1em\">\r\n          <FormControl id=\"generator\">\r\n            <FormLabel>Generator</FormLabel>\r\n            <Select\r\n              name=\"generator\"\r\n              placeHolder=\"Select Generator\"\r\n              value={this.props.data.generator}\r\n              onChange={this.handleGeneratorChange}\r\n            >\r\n              <option value=\"1\">Binary Tree</option>\r\n              <option value=\"2\">Sidewinder</option>\r\n              <option value=\"3\">Aldous-Broder</option>\r\n              <option value=\"4\">Wilson's</option>\r\n              <option value=\"5\">Hunt and Kill</option>\r\n              <option value=\"6\">Recursive Backtracker</option>\r\n              <option value=\"7\">Kruskal's</option>\r\n              <option value=\"8\">Prim's</option>\r\n              <option value=\"9\">Growing Tree</option>\r\n              <option value=\"10\">Eller's</option>\r\n              <option value=\"11\">Recursive Subdivision</option>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl id=\"seed\">\r\n            <FormLabel>Seed</FormLabel>\r\n            <Input\r\n              name=\"seed\"\r\n              placeholder=\"Seed\"\r\n              value={this.props.data.seed}\r\n              onChange={this.handleSeedChange}\r\n            />\r\n          </FormControl>\r\n        </SimpleGrid>\r\n        <SimpleGrid columns={2} spacing=\"1em\" paddingBottom=\"1em\">\r\n          <FormControl id=\"width\">\r\n            <FormLabel>Width</FormLabel>\r\n            <Input\r\n              name=\"width\"\r\n              placeholder=\"Width\"\r\n              value={this.props.data.width}\r\n              onChange={this.handleWidthChange}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"height\">\r\n            <FormLabel>Height</FormLabel>\r\n            <Input\r\n              name=\"height\"\r\n              placeholder=\"Height\"\r\n              value={this.props.data.height}\r\n              onChange={this.handleHeightChange}\r\n            />\r\n          </FormControl>\r\n        </SimpleGrid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  SimpleGrid,\r\n} from '@chakra-ui/react';\r\n\r\nimport { BinaryTreeData } from '../../../../../lib/mazes';\r\n\r\nexport interface IBinaryTreeProps {\r\n  data: BinaryTreeData;\r\n  handleChange: (fieldName: string, value: number) => void;\r\n}\r\n\r\nexport interface IBinaryTreeState {}\r\n\r\nexport class BinaryTreeProperties extends React.Component<\r\n  IBinaryTreeProps,\r\n  IBinaryTreeState\r\n> {\r\n  constructor(props: IBinaryTreeProps) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.handleDirectionsChange = this.handleDirectionsChange.bind(this);\r\n    this.handleChanceVerticalChange =\r\n      this.handleChanceVerticalChange.bind(this);\r\n  }\r\n\r\n  handleDirectionsChange(event: React.FormEvent<HTMLSelectElement>) {\r\n    this.props.handleChange('directions', parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  handleChanceVerticalChange(event: React.FormEvent<HTMLInputElement>) {\r\n    this.props.handleChange(\r\n      'chanceVertical',\r\n      parseInt(event.currentTarget.value)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SimpleGrid columns={2} spacing=\"1em\" paddingBottom=\"1em\">\r\n        <FormControl id=\"directions\">\r\n          <FormLabel>Direction Choices</FormLabel>\r\n          <Select\r\n            name=\"directions\"\r\n            placeHolder=\"Directions\"\r\n            value={this.props.data.direction}\r\n            onChange={this.handleDirectionsChange}\r\n          >\r\n            <option value=\"1\">North & East</option>\r\n            <option value=\"2\">South & East</option>\r\n            <option value=\"3\">South & West</option>\r\n            <option value=\"4\">North & West</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl id=\"chanceVertical\">\r\n          <FormLabel>Vertical Chance</FormLabel>\r\n          <Input\r\n            name=\"chanceVertical\"\r\n            placeholder=\"Vertical Chance\"\r\n            value={this.props.data.chanceVertical}\r\n            onChange={this.handleChanceVerticalChange}\r\n          />\r\n        </FormControl>\r\n      </SimpleGrid>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  SimpleGrid,\r\n} from '@chakra-ui/react';\r\n\r\nimport { SidewinderData } from '../../../../../lib/mazes';\r\n\r\nexport interface ISidewinderProps {\r\n  data: SidewinderData;\r\n  handleChange: (fieldName: string, value: number) => void;\r\n}\r\n\r\nexport interface ISidewinderState {}\r\n\r\nexport class SidewinderProperties extends React.Component<\r\n  ISidewinderProps,\r\n  ISidewinderState\r\n> {\r\n  constructor(props: ISidewinderProps) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.handleWindDirectionChange = this.handleWindDirectionChange.bind(this);\r\n    this.handleChanceWindChange = this.handleChanceWindChange.bind(this);\r\n    this.handleSideDirectionChange = this.handleSideDirectionChange.bind(this);\r\n  }\r\n\r\n  handleSideDirectionChange(event: React.FormEvent<HTMLSelectElement>) {\r\n    this.props.handleChange(\r\n      'sideDirection',\r\n      parseInt(event.currentTarget.value)\r\n    );\r\n  }\r\n\r\n  handleWindDirectionChange(event: React.FormEvent<HTMLSelectElement>) {\r\n    this.props.handleChange(\r\n      'windDirection',\r\n      parseInt(event.currentTarget.value)\r\n    );\r\n  }\r\n\r\n  handleChanceWindChange(event: React.FormEvent<HTMLInputElement>) {\r\n    this.props.handleChange(\r\n      'chanceVertical',\r\n      parseInt(event.currentTarget.value)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SimpleGrid columns={2} spacing=\"1em\" paddingBottom=\"1em\">\r\n          <FormControl id=\"sideDirection\">\r\n            <FormLabel>Side Direction</FormLabel>\r\n            <Select\r\n              name=\"sideDirection\"\r\n              placeHolder=\"Side Direction\"\r\n              value={this.props.data.sideDirection}\r\n              onChange={this.handleSideDirectionChange}\r\n            >\r\n              <option value=\"0\">North</option>\r\n              <option value=\"1\">East</option>\r\n              <option value=\"2\">South</option>\r\n              <option value=\"3\">West</option>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl id=\"windDirection\">\r\n            <FormLabel>Wind Direction</FormLabel>\r\n            <Select\r\n              name=\"windDirection\"\r\n              placeHolder=\"Wind Direction\"\r\n              value={this.props.data.windDirection}\r\n              onChange={this.handleWindDirectionChange}\r\n            >\r\n              <option value=\"0\">North</option>\r\n              <option value=\"1\">East</option>\r\n              <option value=\"2\">South</option>\r\n              <option value=\"3\">West</option>\r\n            </Select>\r\n          </FormControl>\r\n        </SimpleGrid>\r\n        <SimpleGrid columns={2} spacing=\"1em\" paddingBottom=\"1em\">\r\n          <FormControl id=\"chanceWind\">\r\n            <FormLabel>Wind Chance</FormLabel>\r\n            <Input\r\n              name=\"chanceWind\"\r\n              placeholder=\"Wind Chance\"\r\n              value={this.props.data.chanceWind}\r\n              onChange={this.handleChanceWindChange}\r\n            />\r\n          </FormControl>\r\n        </SimpleGrid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export class RGBA {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n\r\n  constructor(r: number, g: number, b: number, a: number) {\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = a;\r\n  }\r\n}\r\n\r\nexport const Black: RGBA = new RGBA(0, 0, 0, 255);\r\nexport const White: RGBA = new RGBA(255, 255, 255, 255);\r\n","import { RGBA } from './rgba';\r\n\r\nexport class Image extends ImageData {\r\n  GetPixel(x: number, y: number): RGBA {\r\n    return new RGBA(\r\n      this.data[this.width * x * 4 + y * 4],\r\n      this.data[this.width * x * 4 + y * 4 + 1],\r\n      this.data[this.width * x * 4 + y * 4 + 2],\r\n      this.data[this.width * x * 4 + y * 4 + 3]\r\n    );\r\n  }\r\n\r\n  SetPixel(x: number, y: number, c: RGBA) {\r\n    this.data[this.width * x * 4 + y * 4] = c.r;\r\n    this.data[this.width * x * 4 + y * 4 + 1] = c.g;\r\n    this.data[this.width * x * 4 + y * 4 + 2] = c.b;\r\n    this.data[this.width * x * 4 + y * 4 + 3] = c.a;\r\n  }\r\n\r\n  SetPixels(x: number, y: number, imgData: Image) {\r\n    for (let i: number = 0; i < imgData.width; i++) {\r\n      for (let j: number = 0; j < imgData.height; j++) {\r\n        this.SetPixel(i + x, j + y, imgData.GetPixel(i, j));\r\n      }\r\n    }\r\n  }\r\n\r\n  FlipOverY() {\r\n    let newData: Image = new Image(this.width, this.height);\r\n    for (let i: number = 0; i < this.width; i++) {\r\n      for (let j: number = 0; j < this.height; j++) {\r\n        newData.SetPixel(i, this.height - 1 - j, this.GetPixel(i, j));\r\n      }\r\n    }\r\n    for (let i: number = 0; i < this.data.length; i++) {\r\n      this.data[i] = newData.data[i];\r\n    }\r\n  }\r\n\r\n  FlipOverX() {\r\n    let newData: Image = new Image(this.width, this.height);\r\n    for (let i: number = 0; i < this.width; i++) {\r\n      for (let j: number = 0; j < this.height; j++) {\r\n        newData.SetPixel(this.width - 1 - i, j, this.GetPixel(i, j));\r\n      }\r\n    }\r\n    for (let i: number = 0; i < this.data.length; i++) {\r\n      this.data[i] = newData.data[i];\r\n    }\r\n  }\r\n\r\n  Transpose() {\r\n    let newData: Image = new Image(this.width, this.height);\r\n    for (let i: number = 0; i < this.width; i++) {\r\n      for (let j: number = 0; j < this.height; j++) {\r\n        newData.SetPixel(j, i, this.GetPixel(i, j));\r\n      }\r\n    }\r\n    for (let i: number = 0; i < this.data.length; i++) {\r\n      this.data[i] = newData.data[i];\r\n    }\r\n  }\r\n}\r\n","//Directions\r\n//3-sides point up: 0 - Northeast, 1 - South, 2 - Northwest\r\n//3-sides point down: 0 - North, 1 - Southeast, 2 - Southwest\r\n//4-sides : 0 - North, 1 - East, 2 - South, 3 - West\r\n//6-sides : 0 - North, 1 - Northeast, 2 - Southeast, 3 - South, 4 - Southwest, 5 - Northwest\r\n\r\nexport class Wall {\r\n  direction!: number;\r\n  isWall!: boolean;\r\n  isStairsDown!: boolean;\r\n  isStairsUp!: boolean;\r\n  weight: number;\r\n\r\n  constructor() {\r\n    this.weight = 0;\r\n  }\r\n\r\n  IsFlat(): boolean {\r\n    return !this.isWall && !this.isStairsUp && !this.isStairsDown;\r\n  }\r\n}\r\n","import { Image } from '../image-utils/image';\r\nimport { RGBA } from '../image-utils/rgba';\r\nimport { Wall } from './wall';\r\n\r\nexport class Cell {\r\n  x: number;\r\n  y: number;\r\n\r\n  visited!: boolean;\r\n  adjacentCells!: (Cell | undefined)[];\r\n  walls!: Wall[];\r\n  numCellSides: number;\r\n\r\n  set!: number;\r\n  masked!: boolean;\r\n\r\n  overCell!: Cell | undefined;\r\n  underCell!: Cell | undefined;\r\n\r\n  constructor(x: number, y: number, numCellSides: number = 4) {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    this.visited = false;\r\n    this.set = 0;\r\n    this.masked = false;\r\n\r\n    this.adjacentCells = [];\r\n    this.walls = [];\r\n    this.numCellSides = numCellSides;\r\n\r\n    for (let i: number = 0; i < numCellSides; i++) {\r\n      let wall = new Wall();\r\n      wall.direction = i;\r\n      wall.isWall = false;\r\n      wall.isStairsUp = false;\r\n      wall.isStairsDown = false;\r\n      this.walls.push(wall);\r\n    }\r\n  }\r\n\r\n  SetWall(direction: number, isWall: boolean): void {\r\n    this.walls[direction].isWall = isWall;\r\n  }\r\n\r\n  SetWallAndStairs(\r\n    direction: number,\r\n    isWall: boolean,\r\n    isStairsUp: boolean,\r\n    isStairsDown: boolean\r\n  ): void {\r\n    this.walls[direction].isWall = isWall;\r\n    this.walls[direction].isStairsUp = isStairsUp;\r\n    this.walls[direction].isStairsDown = isStairsDown;\r\n  }\r\n\r\n  CanTunnel(): boolean {\r\n    let i: number = 0;\r\n    let canTunnel: boolean = false;\r\n    do {\r\n      canTunnel = this.CanTunnelDirection(i);\r\n      i++;\r\n    } while (!canTunnel && i < this.adjacentCells.length);\r\n    return canTunnel;\r\n  }\r\n\r\n  CanTunnelDirection(direction: number): boolean {\r\n    return false;\r\n  }\r\n\r\n  ColumnExists(direction: number): boolean | undefined {\r\n    let retVal: boolean | undefined = true;\r\n    if (this.numCellSides === 4) {\r\n      retVal =\r\n        this.adjacentCells[direction] !== undefined &&\r\n        this.walls[direction] !== undefined &&\r\n        this.walls[direction].IsFlat() &&\r\n        this.adjacentCells[direction]?.adjacentCells[(direction + 1) % 4] !==\r\n          undefined &&\r\n        this.adjacentCells[direction]?.walls[(direction + 1) % 4].IsFlat() &&\r\n        this.adjacentCells[direction]?.adjacentCells[(direction + 1) % 4]\r\n          ?.adjacentCells[(direction + 2) % 4] !== undefined &&\r\n        this.adjacentCells[direction]?.adjacentCells[\r\n          (direction + 1) % 4\r\n        ]?.walls[(direction + 2) % 4].IsFlat() &&\r\n        this.adjacentCells[direction]?.adjacentCells[(direction + 1) % 4]\r\n          ?.adjacentCells[(direction + 2) % 4]?.adjacentCells[\r\n          (direction + 3) % 4\r\n        ] !== undefined &&\r\n        this.adjacentCells[direction]?.adjacentCells[\r\n          (direction + 1) % 4\r\n        ]?.adjacentCells[(direction + 2) % 4]?.walls[\r\n          (direction + 3) % 4\r\n        ].IsFlat();\r\n    }\r\n    return retVal;\r\n  }\r\n\r\n  Display(dimension: number, wallColor: RGBA, floorColor: RGBA): Image {\r\n    let imgData = new Image(dimension, dimension);\r\n    let paintColor: RGBA = floorColor;\r\n\r\n    for (let i: number = 0; i < dimension; i++) {\r\n      for (let j: number = 0; j < dimension; j++) {\r\n        imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //Columns\r\n\r\n    //NE\r\n    paintColor = this.ColumnExists(0) ? floorColor : wallColor;\r\n    for (let i: number = dimension - dimension / 4; i < dimension; i++) {\r\n      for (let j: number = dimension - dimension / 4; j < dimension; j++) {\r\n        imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //SE\r\n    paintColor = this.ColumnExists(1) ? floorColor : wallColor;\r\n    for (let i: number = dimension - dimension / 4; i < dimension; i++) {\r\n      for (let j: number = 0; j < dimension / 4; j++) {\r\n        imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //SW\r\n    paintColor = this.ColumnExists(2) ? floorColor : wallColor;\r\n    for (let i: number = 0; i < dimension / 4; i++) {\r\n      for (let j: number = 0; j < dimension / 4; j++) {\r\n        imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //NW\r\n    paintColor = this.ColumnExists(3) ? floorColor : wallColor;\r\n    for (let i: number = 0; i < dimension / 4; i++) {\r\n      for (let j: number = dimension - dimension / 4; j < dimension; j++) {\r\n        imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //Walls\r\n\r\n    //North\r\n    if (this.walls[0].isWall) {\r\n      paintColor = this.walls[0].isWall ? wallColor : floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (\r\n          let j: number = dimension - dimension / 4;\r\n          j < dimension - dimension / 8;\r\n          j++\r\n        )\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n      paintColor =\r\n        this.underCell === undefined || this.underCell.walls[0].isWall\r\n          ? wallColor\r\n          : floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (let j: number = dimension - dimension / 8; j < dimension; j++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    } else {\r\n      paintColor = floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (let j: number = dimension - dimension / 4; j < dimension; j++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //East\r\n    if (this.walls[1].isWall) {\r\n      paintColor = this.walls[1].isWall ? wallColor : floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (\r\n          let i: number = dimension - dimension / 4;\r\n          i < dimension - dimension / 8;\r\n          i++\r\n        )\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n      paintColor =\r\n        this.underCell === undefined || this.underCell.walls[1].isWall\r\n          ? wallColor\r\n          : floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (let i: number = dimension - dimension / 8; i < dimension; i++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    } else {\r\n      paintColor = floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (let i: number = dimension - dimension / 4; i < dimension; i++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //South\r\n    if (this.walls[2].isWall) {\r\n      paintColor = this.walls[2].isWall ? wallColor : floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (let j: number = dimension / 8; j < dimension / 4; j++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n      paintColor =\r\n        this.underCell === undefined || this.underCell.walls[2].isWall\r\n          ? wallColor\r\n          : floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (let j: number = 0; j < dimension / 8; j++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    } else {\r\n      paintColor = floorColor;\r\n      for (let i: number = dimension / 4; i < dimension - dimension / 4; i++) {\r\n        for (let j: number = 0; j < dimension / 4; j++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    //West\r\n    if (this.walls[3].isWall) {\r\n      paintColor = this.walls[3].isWall ? wallColor : floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (let i: number = dimension / 8; i < dimension / 4; i++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n      paintColor =\r\n        this.underCell === undefined || this.underCell.walls[3].isWall\r\n          ? wallColor\r\n          : floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (let i: number = 0; i < dimension / 8; i++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    } else {\r\n      paintColor = floorColor;\r\n      for (let j: number = dimension / 4; j < dimension - dimension / 4; j++) {\r\n        for (let i: number = 0; i < dimension / 4; i++)\r\n          imgData.SetPixel(i, j, paintColor);\r\n      }\r\n    }\r\n\r\n    return imgData;\r\n  }\r\n\r\n  GetWeightDirection(weight: number) {\r\n    let retVal: number = -1;\r\n    let i: number = 0;\r\n    do {\r\n      if (this.walls[i].weight === weight) {\r\n        retVal = i;\r\n      }\r\n      i++;\r\n    } while (retVal === -1 || i < this.numCellSides);\r\n    return retVal;\r\n  }\r\n\r\n  GetCellDirection(nextCell: Cell): number {\r\n    let retVal: number = -1;\r\n    let i: number = 0;\r\n    do {\r\n      if (\r\n        this.adjacentCells[i] !== undefined &&\r\n        (this.adjacentCells[i] as Cell).x === nextCell.x &&\r\n        (this.adjacentCells[i] as Cell).y === nextCell.y\r\n      ) {\r\n        retVal = i;\r\n      }\r\n      i++;\r\n    } while (retVal === -1 || i < this.numCellSides);\r\n    return retVal;\r\n  }\r\n\r\n  ToString(): string {\r\n    return '(' + this.x.toString() + ',' + this.y.toString() + ')';\r\n  }\r\n}\r\n","import { Cell } from './cell';\r\n\r\nimport { Image } from '../image-utils/image';\r\nimport { Black, RGBA, White } from '../image-utils/rgba';\r\n\r\nexport class Grid {\r\n  width: number;\r\n  height: number;\r\n  numCellSides: number;\r\n  cells: Cell[][];\r\n\r\n  constructor(width: number, height: number, numCellSides: number) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.numCellSides = numCellSides;\r\n    this.cells = [];\r\n\r\n    for (let i: number = 0; i < width; i++) {\r\n      this.cells[i] = [];\r\n      for (let j: number = 0; j < height; j++) {\r\n        this.cells[i][j] = new Cell(i, j, numCellSides);\r\n      }\r\n    }\r\n  }\r\n\r\n  InitializeGrid(): void {\r\n    for (let i: number = 0; i < this.width; i++) {\r\n      for (let j: number = 0; j < this.height; j++) {\r\n        if (!this.cells[i][j].masked) {\r\n          if (this.numCellSides === 4) {\r\n            //North\r\n            if (j < this.height - 1) {\r\n              this.cells[i][j].adjacentCells.push(\r\n                !this.cells[i][j + 1].masked ? this.cells[i][j + 1] : undefined\r\n              );\r\n            } else {\r\n              this.cells[i][j].adjacentCells.push(undefined);\r\n            }\r\n            //East\r\n            if (i < this.width - 1) {\r\n              this.cells[i][j].adjacentCells.push(\r\n                !this.cells[i + 1][j].masked ? this.cells[i + 1][j] : undefined\r\n              );\r\n            } else {\r\n              this.cells[i][j].adjacentCells.push(undefined);\r\n            }\r\n            //South\r\n            if (j > 0) {\r\n              this.cells[i][j].adjacentCells.push(\r\n                !this.cells[i][j - 1].masked ? this.cells[i][j - 1] : undefined\r\n              );\r\n            } else {\r\n              this.cells[i][j].adjacentCells.push(undefined);\r\n            }\r\n            //West\r\n            if (i > 0) {\r\n              this.cells[i][j].adjacentCells.push(\r\n                !this.cells[i - 1][j].masked ? this.cells[i - 1][j] : undefined\r\n              );\r\n            } else {\r\n              this.cells[i][j].adjacentCells.push(undefined);\r\n            }\r\n          }\r\n\r\n          for (let w: number = 0; w < this.numCellSides; w++) {\r\n            this.cells[i][j].SetWall(w, true);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Display(dimension: number): Image {\r\n    const size: number = Math.max(this.width, this.height);\r\n    const wallColor: RGBA = Black;\r\n    const floorColor: RGBA = White;\r\n\r\n    let imgData = new Image(size * dimension, size * dimension);\r\n    for (let i: number = 0; i < size * dimension; i++) {\r\n      for (let j: number = 0; j < size * dimension; j++) {\r\n        imgData.SetPixel(i, j, floorColor);\r\n      }\r\n    }\r\n\r\n    let iOffset: number = 0,\r\n      jOffset: number = 0;\r\n    if (this.width < this.height) {\r\n      iOffset = Math.floor((this.height - this.width) / 2);\r\n    } else if (this.width > this.height) {\r\n      jOffset = Math.floor((this.width - this.height) / 2);\r\n    }\r\n\r\n    for (let i: number = 0; i < this.width; i++) {\r\n      for (let j: number = 0; j < this.height; j++) {\r\n        let cellImgData = this.cells[i][j].Display(\r\n          dimension,\r\n          wallColor,\r\n          floorColor\r\n        );\r\n        imgData.SetPixels(\r\n          (i + iOffset) * dimension,\r\n          (j + jOffset) * dimension,\r\n          cellImgData\r\n        );\r\n      }\r\n    }\r\n\r\n    imgData.Transpose();\r\n    imgData.FlipOverX();\r\n\r\n    return imgData;\r\n  }\r\n}\r\n","export class Random {\r\n  seed: number;\r\n  private i: number = 0;\r\n\r\n  constructor(seed: number) {\r\n    this.seed = seed;\r\n  }\r\n\r\n  GetInt(max: number) {\r\n    return Math.floor(this.mulberry32() * max);\r\n  }\r\n\r\n  GetIntInRange(min: number, max: number) {\r\n    return Math.floor(this.mulberry32() * (max - min)) + min;\r\n  }\r\n\r\n  private mulberry32(): number {\r\n    this.i++;\r\n    let t: number = (this.seed + this.i) ^ 0x6d2b79f5;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Grid } from '../maze-parts/grid';\r\nimport { Image } from '../image-utils/image';\r\nimport { Random } from '../utils/random';\r\n\r\nexport class GeneratorData {\r\n  height: number;\r\n  width: number;\r\n  numCellSides: number;\r\n  seed: number;\r\n  grid!: Grid;\r\n  weave: number;\r\n  cullDeadEnds: number;\r\n  generator: number;\r\n\r\n  constructor() {\r\n    this.generator = 1;\r\n    this.width = 10;\r\n    this.height = 10;\r\n    this.numCellSides = 4;\r\n    this.seed = 1337;\r\n    this.weave = 0;\r\n    this.cullDeadEnds = 0;\r\n  }\r\n}\r\n\r\nexport class Generator {\r\n  baseProps: GeneratorData;\r\n  grid!: Grid;\r\n  random!: Random;\r\n\r\n  constructor(baseProps: GeneratorData) {\r\n    this.baseProps = baseProps;\r\n  }\r\n\r\n  RunGenerator(): void {\r\n    this.random = new Random(this.baseProps.seed);\r\n    this.grid = new Grid(\r\n      this.baseProps.width,\r\n      this.baseProps.height,\r\n      this.baseProps.numCellSides\r\n    );\r\n    this.grid.InitializeGrid();\r\n\r\n    this.Generate();\r\n    this.Weave();\r\n    this.RemoveDeadEnds();\r\n  }\r\n\r\n  protected Generate(): void {}\r\n\r\n  protected Weave(): void {}\r\n\r\n  protected RemoveDeadEnds(): void {}\r\n\r\n  protected MergeCells(currentCell: Cell, nextCell: Cell | undefined): void {\r\n    if (this.baseProps.numCellSides === 4) {\r\n      if (\r\n        currentCell.adjacentCells[0] !== undefined &&\r\n        currentCell.adjacentCells[0]?.x === nextCell?.x &&\r\n        currentCell.adjacentCells[0]?.y === nextCell?.y\r\n      ) {\r\n        currentCell.SetWall(0, false);\r\n        nextCell.SetWall(2, false);\r\n      } else if (\r\n        currentCell.adjacentCells[1] !== undefined &&\r\n        currentCell.adjacentCells[1]?.x === nextCell?.x &&\r\n        currentCell.adjacentCells[1]?.y === nextCell?.y\r\n      ) {\r\n        currentCell.SetWall(1, false);\r\n        nextCell.SetWall(3, false);\r\n      } else if (\r\n        currentCell.adjacentCells[2] !== undefined &&\r\n        currentCell.adjacentCells[2]?.x === nextCell?.x &&\r\n        currentCell.adjacentCells[2]?.y === nextCell?.y\r\n      ) {\r\n        currentCell.SetWall(2, false);\r\n        nextCell.SetWall(0, false);\r\n      } else if (\r\n        currentCell.adjacentCells[3] !== undefined &&\r\n        currentCell.adjacentCells[3]?.x === nextCell?.x &&\r\n        currentCell.adjacentCells[3]?.y === nextCell?.y\r\n      ) {\r\n        currentCell.SetWall(3, false);\r\n        nextCell.SetWall(1, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  Display(dimension: number): Image {\r\n    return this.grid.Display(dimension);\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class AldousBroderData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class AldousBroder extends Generator {\r\n  props: AldousBroderData;\r\n\r\n  constructor(baseProps: GeneratorData, props: AldousBroderData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let adjacentCount: number = 0;\r\n    let mapCells: Cell[] = [];\r\n    let currentCell: Cell;\r\n    let nextCell: Cell | undefined;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    currentCell = mapCells[this.random.GetInt(mapCells.length)];\r\n    do {\r\n      currentCell.visited = true;\r\n      adjacentCount = currentCell.adjacentCells.filter(\r\n        (a) => a !== undefined\r\n      ).length;\r\n      nextCell = currentCell.adjacentCells.filter((a) => a !== undefined)[\r\n        this.random.GetInt(adjacentCount)\r\n      ];\r\n      if (!nextCell?.visited) {\r\n        this.MergeCells(currentCell, nextCell);\r\n      }\r\n      currentCell = nextCell as Cell;\r\n      nextCell = undefined;\r\n    } while (mapCells.some((a) => !a.visited));\r\n  }\r\n}\r\n","import { Generator, GeneratorData } from './generator';\r\n\r\nexport class BinaryTreeData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class BinaryTree extends Generator {\r\n  props: BinaryTreeData;\r\n\r\n  constructor(baseProps: GeneratorData, props: BinaryTreeData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let randResult: number = 0;\r\n    const verticalCell: number =\r\n      this.props.direction === 1 || this.props.direction === 4 ? 0 : 2;\r\n    const horizontalCell: number =\r\n      this.props.direction === 1 || this.props.direction === 2 ? 1 : 3;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (this.baseProps.numCellSides === 4) {\r\n          if (\r\n            this.grid.cells[i][j]?.adjacentCells[verticalCell] !== undefined &&\r\n            this.grid.cells[i][j]?.adjacentCells[horizontalCell] !== undefined\r\n          ) {\r\n            randResult = this.random.GetInt(100);\r\n            if (randResult < this.props.chanceVertical) {\r\n              this.MergeCells(\r\n                this.grid.cells[i][j],\r\n                this.grid.cells[i][j].adjacentCells[verticalCell]\r\n              );\r\n            } else {\r\n              this.MergeCells(\r\n                this.grid.cells[i][j],\r\n                this.grid.cells[i][j].adjacentCells[horizontalCell]\r\n              );\r\n            }\r\n          } else if (\r\n            this.grid.cells[i][j]?.adjacentCells[verticalCell] !== undefined\r\n          ) {\r\n            this.MergeCells(\r\n              this.grid.cells[i][j],\r\n              this.grid.cells[i][j].adjacentCells[verticalCell]\r\n            );\r\n          } else if (\r\n            this.grid.cells[i][j]?.adjacentCells[horizontalCell] !== undefined\r\n          ) {\r\n            this.MergeCells(\r\n              this.grid.cells[i][j],\r\n              this.grid.cells[i][j].adjacentCells[horizontalCell]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class GrowingTreeData {\r\n  direction: number;\r\n  chanceVertical: number;\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class GrowingTree extends Generator {\r\n  props: GrowingTreeData;\r\n\r\n  constructor(baseProps: GeneratorData, props: GrowingTreeData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let usedCells: Cell[] = [];\r\n    let currentCell: Cell;\r\n    let nextCell: Cell | undefined;\r\n    let pickCount: number;\r\n    let adjacentCount: number;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    currentCell = mapCells[this.random.GetInt(mapCells.length)];\r\n    currentCell.visited = true;\r\n    usedCells.push(currentCell);\r\n    do {\r\n      do {\r\n        pickCount = usedCells.filter((a) =>\r\n          a.adjacentCells.some((b) => b !== undefined && !b.visited)\r\n        ).length;\r\n        currentCell = usedCells.filter((a) =>\r\n          a.adjacentCells.some((b) => b !== undefined && !b.visited)\r\n        )[this.random.GetInt(pickCount)];\r\n      } while (\r\n        !currentCell.adjacentCells.some((a) => a !== undefined && !a.visited)\r\n      );\r\n\r\n      adjacentCount = currentCell.adjacentCells.filter(\r\n        (a) => a !== undefined && !a.visited\r\n      ).length;\r\n      nextCell = currentCell.adjacentCells.filter(\r\n        (a) => a !== undefined && !a.visited\r\n      )[this.random.GetInt(adjacentCount)];\r\n      (nextCell as Cell).visited = true;\r\n      this.MergeCells(currentCell, nextCell);\r\n      usedCells.push(nextCell as Cell);\r\n    } while (mapCells.some((a) => !a.visited));\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class HuntAndKillData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class HuntAndKill extends Generator {\r\n  props: HuntAndKillData;\r\n\r\n  constructor(baseProps: GeneratorData, props: HuntAndKillData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let currentCell: Cell | undefined;\r\n    let nextCell: Cell | undefined;\r\n    let adjacentCount: number = 0;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    currentCell = mapCells[this.random.GetInt(mapCells.length)];\r\n    currentCell.visited = true;\r\n\r\n    do {\r\n      adjacentCount = (currentCell as Cell).adjacentCells.filter(\r\n        (a) => a !== undefined\r\n      ).length;\r\n      nextCell = (currentCell as Cell).adjacentCells.filter(\r\n        (a) => a !== undefined\r\n      )[this.random.GetInt(adjacentCount)] as Cell;\r\n\r\n      if (!nextCell.visited) {\r\n        this.MergeCells(currentCell as Cell, nextCell);\r\n        currentCell = nextCell;\r\n        currentCell.visited = true;\r\n      } else {\r\n        currentCell = undefined;\r\n        let i = this.baseProps.width - 1;\r\n        let j = this.baseProps.height - 1;\r\n\r\n        do {\r\n          i = this.baseProps.width - 1;\r\n          do {\r\n            if (\r\n              !this.grid.cells[i][j].visited &&\r\n              this.grid.cells[i][j].adjacentCells.some(\r\n                (a) => a !== undefined && a.visited\r\n              )\r\n            ) {\r\n              currentCell = this.grid.cells[i][j];\r\n            }\r\n            i--;\r\n          } while (currentCell === undefined && i >= 0);\r\n          j--;\r\n        } while (currentCell === undefined && j >= 0);\r\n\r\n        this.MergeCells(\r\n          currentCell as Cell,\r\n          (currentCell as Cell).adjacentCells.filter(\r\n            (a) => a !== undefined && a.visited\r\n          )[0]\r\n        );\r\n        (currentCell as Cell).visited = true;\r\n      }\r\n    } while (mapCells.some((a) => !a.visited));\r\n  }\r\n}\r\n","import { Cell } from '../';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class KruskalData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class Kruskal extends Generator {\r\n  props: KruskalData;\r\n\r\n  constructor(baseProps: GeneratorData, props: KruskalData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let currentCell: Cell | undefined;\r\n    let nextCell: Cell | undefined;\r\n    let currentWeight: number = 1;\r\n    let nextSetNumber: number = 1;\r\n    let direction: number;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          for (let k: number = 0; k < this.grid.numCellSides; k++) {\r\n            if (\r\n              this.grid.cells[i][j].adjacentCells[k] !== undefined &&\r\n              this.grid.cells[i][j].walls[k].weight === 0\r\n            ) {\r\n              let weight = this.random.GetIntInRange(1, 100);\r\n              this.grid.cells[i][j].walls[k].weight = weight;\r\n              (this.grid.cells[i][j].adjacentCells[k] as Cell).walls[\r\n                (k + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n              ].weight = weight;\r\n            }\r\n          }\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    do {\r\n      while (\r\n        mapCells.some((a) => a.walls.some((b) => b.weight === currentWeight))\r\n      ) {\r\n        currentCell = mapCells.filter((a) =>\r\n          a.walls.some((b) => b.weight === currentWeight)\r\n        )[0];\r\n\r\n        nextCell = currentCell.adjacentCells.filter(\r\n          (a) =>\r\n            a !== undefined &&\r\n            a.walls.some(\r\n              (b) =>\r\n                b.weight === currentWeight &&\r\n                b.direction ===\r\n                  ((currentCell as Cell).GetWeightDirection(currentWeight) +\r\n                    this.grid.numCellSides / 2) %\r\n                    this.grid.numCellSides\r\n            )\r\n        )[0];\r\n\r\n        if (currentCell.set === 0 || (nextCell as Cell).set === 0) {\r\n          if (currentCell.set === 0 && (nextCell as Cell).set === 0) {\r\n            currentCell.set = nextSetNumber;\r\n            (nextCell as Cell).set = nextSetNumber;\r\n            nextSetNumber++;\r\n          } else if (currentCell.set === 0 && (nextCell as Cell).set > 0) {\r\n            currentCell.set = (nextCell as Cell).set;\r\n          } else if (currentCell.set > 0 && (nextCell as Cell).set === 0) {\r\n            (nextCell as Cell).set = currentCell.set;\r\n          }\r\n\r\n          this.MergeCells(currentCell, nextCell);\r\n          direction = currentCell.GetCellDirection(nextCell as Cell);\r\n\r\n          currentCell.walls[direction].weight = 9999;\r\n          (nextCell as Cell).walls[\r\n            (direction + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n          ].weight = 9999;\r\n        } else {\r\n          if (currentCell.set === (nextCell as Cell).set) {\r\n            direction = currentCell.GetCellDirection(nextCell as Cell);\r\n\r\n            currentCell.walls[direction].weight = 9999;\r\n            (nextCell as Cell).walls[\r\n              (direction + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n            ].weight = 9999;\r\n          } else {\r\n            this.MergeCells(currentCell, nextCell);\r\n\r\n            direction = currentCell.GetCellDirection(nextCell as Cell);\r\n\r\n            currentCell.walls[direction].weight = 9999;\r\n            (nextCell as Cell).walls[\r\n              (direction + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n            ].weight = 9999;\r\n\r\n            let filterSet: number, mapSet: number;\r\n            if (currentCell.set < (nextCell as Cell).set) {\r\n              filterSet = (nextCell as Cell).set;\r\n              mapSet = (currentCell as Cell).set;\r\n              mapCells\r\n                .filter((a) => a.set === filterSet)\r\n                .forEach((a) => (a.set = mapSet));\r\n            } else {\r\n              filterSet = (currentCell as Cell).set;\r\n              mapSet = (nextCell as Cell).set;\r\n              mapCells\r\n                .filter((a) => a.set === filterSet)\r\n                .forEach((a) => (a.set = mapSet));\r\n            }\r\n          }\r\n        }\r\n      }\r\n      currentWeight++;\r\n    } while (mapCells.filter((a) => a.set === 1).length < mapCells.length);\r\n  }\r\n}\r\n","import { Cell } from '../';\r\nimport { Generator, GeneratorData } from './generator';\r\nimport { Wall } from '../';\r\n\r\nexport class PrimData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class Prim extends Generator {\r\n  props: PrimData;\r\n\r\n  constructor(baseProps: GeneratorData, props: PrimData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let usedCells: Cell[] = [];\r\n    let currentCell: Cell | undefined;\r\n    let nextCell: Cell | undefined;\r\n    let direction: number = 0;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          for (let k: number = 0; k < this.grid.numCellSides; k++) {\r\n            if (\r\n              this.grid.cells[i][j].adjacentCells[k] !== undefined &&\r\n              this.grid.cells[i][j].walls[k].weight === 0\r\n            ) {\r\n              let weight = this.random.GetIntInRange(1, 100);\r\n              this.grid.cells[i][j].walls[k].weight = weight;\r\n              (this.grid.cells[i][j].adjacentCells[k] as Cell).walls[\r\n                (k + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n              ].weight = weight;\r\n            }\r\n          }\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    currentCell = mapCells[this.random.GetInt(mapCells.length)];\r\n    usedCells.push(currentCell);\r\n    do {\r\n      currentCell = usedCells[0];\r\n      for (let i: number = 0; i < usedCells.length; i++) {\r\n        if (\r\n          usedCells[i].x !== currentCell.x ||\r\n          usedCells[i].y !== currentCell.y\r\n        ) {\r\n          if (\r\n            usedCells[i].walls\r\n              .filter((a) => a.weight > 0)\r\n              .sort((a, b) => this.compareWeights(a, b))[0].weight <\r\n            currentCell.walls\r\n              .filter((a) => a.weight > 0)\r\n              .sort((a, b) => this.compareWeights(a, b))[0].weight\r\n          ) {\r\n            currentCell = usedCells[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      direction = currentCell.GetWeightDirection(\r\n        currentCell.walls\r\n          .filter((a) => a.weight > 0)\r\n          .sort((a, b) => this.compareWeights(a, b))[0].weight\r\n      );\r\n\r\n      nextCell = currentCell.adjacentCells[direction];\r\n      if (usedCells.indexOf(nextCell as Cell) === -1) {\r\n        this.MergeCells(currentCell, nextCell);\r\n        usedCells.push(nextCell as Cell);\r\n      }\r\n\r\n      currentCell.walls[direction].weight = 9999;\r\n      (nextCell as Cell).walls[\r\n        (direction + this.grid.numCellSides / 2) % this.grid.numCellSides\r\n      ].weight = 9999;\r\n    } while (usedCells.length < mapCells.length);\r\n  }\r\n\r\n  private compareWeights(a: Wall, b: Wall) {\r\n    return a.weight === b.weight ? 0 : a.weight < b.weight ? -1 : 1;\r\n  }\r\n}\r\n","import { Cell } from '../';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class RecursiveBacktrackerData {\r\n  direction: number; //1 = NE, 2 = SE, 3 = SW, 4 = NW\r\n  chanceVertical: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class RecursiveBacktracker extends Generator {\r\n  props: RecursiveBacktrackerData;\r\n\r\n  constructor(baseProps: GeneratorData, props: RecursiveBacktrackerData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let currentSet: Cell[] = [];\r\n    let currentCell: Cell;\r\n    let nextCell: Cell | undefined;\r\n    let adjacentCount: number = 0;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    currentCell = mapCells[this.random.GetInt(mapCells.length)];\r\n    currentCell.visited = true;\r\n    currentSet.push(currentCell);\r\n\r\n    do {\r\n      adjacentCount = (currentCell as Cell).adjacentCells.filter(\r\n        (a) => a !== undefined && !a.visited\r\n      ).length;\r\n\r\n      if (adjacentCount === 0) {\r\n        currentSet.pop();\r\n        currentCell = currentSet[currentSet.length - 1];\r\n      } else {\r\n        nextCell = (currentCell as Cell).adjacentCells.filter(\r\n          (a) => a !== undefined && !a.visited\r\n        )[this.random.GetInt(adjacentCount)] as Cell;\r\n        this.MergeCells(currentCell, nextCell);\r\n        currentCell = nextCell;\r\n        currentCell.visited = true;\r\n        currentSet.push(currentCell);\r\n      }\r\n    } while (currentSet.length > 0);\r\n  }\r\n}\r\n","import { Generator, GeneratorData } from './generator';\r\nimport { Cell } from '../';\r\n\r\nexport class SidewinderData {\r\n  sideDirection: number;\r\n  windDirection: number;\r\n  chanceWind: number; //1 - 99\r\n\r\n  constructor() {\r\n    this.sideDirection = 1;\r\n    this.windDirection = 0;\r\n    this.chanceWind = 50;\r\n  }\r\n}\r\n\r\nexport class Sidewinder extends Generator {\r\n  props: SidewinderData;\r\n\r\n  constructor(baseProps: GeneratorData, props: SidewinderData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let cellRun: Cell[] = [];\r\n    let randResult: number = 0;\r\n\r\n    let iStart = 0,\r\n      iMax = this.baseProps.width,\r\n      iStep = 1;\r\n    let jStart = 0,\r\n      jMax = this.baseProps.height,\r\n      jStep = 1;\r\n\r\n    switch (this.props.sideDirection) {\r\n      case 0:\r\n        jStart = 0;\r\n        jMax = this.baseProps.height;\r\n        jStep = 1;\r\n        break;\r\n      case 1:\r\n        iStart = 0;\r\n        iMax = this.baseProps.width;\r\n        iStep = 1;\r\n        break;\r\n      case 2:\r\n        jStart = this.baseProps.height - 1;\r\n        jMax = 0;\r\n        jStep = -1;\r\n        break;\r\n      case 3:\r\n        iStart = this.baseProps.width - 1;\r\n        iMax = 0;\r\n        iStep = -1;\r\n        break;\r\n    }\r\n\r\n    switch (this.props.windDirection) {\r\n      case 0:\r\n        jStart = 0;\r\n        jMax = this.baseProps.height;\r\n        jStep = 1;\r\n        break;\r\n      case 1:\r\n        iStart = 0;\r\n        iMax = this.baseProps.width;\r\n        iStep = 1;\r\n        break;\r\n      case 2:\r\n        jStart = this.baseProps.height - 1;\r\n        jMax = 0;\r\n        jStep = -1;\r\n        break;\r\n      case 3:\r\n        iStart = this.baseProps.width - 1;\r\n        iMax = 0;\r\n        iStep = -1;\r\n        break;\r\n    }\r\n\r\n    //E and W\r\n    if (this.props.sideDirection === 1 || this.props.sideDirection === 3) {\r\n      for (\r\n        let j: number = jStart;\r\n        jStart === 0 ? j < jMax : j >= jMax;\r\n        j += jStep\r\n      ) {\r\n        for (\r\n          let i: number = iStart;\r\n          iStart === 0 ? i < iMax : i >= iMax;\r\n          i += iStep\r\n        ) {\r\n          if (this.baseProps.numCellSides === 4) {\r\n            cellRun.push(this.grid.cells[i][j]);\r\n            randResult = this.random.GetInt(100);\r\n\r\n            if (\r\n              this.grid.cells[i][j].adjacentCells[this.props.sideDirection] ===\r\n                undefined ||\r\n              (this.grid.cells[i][j].adjacentCells[this.props.windDirection] !==\r\n                undefined &&\r\n                randResult < this.props.chanceWind)\r\n            ) {\r\n              randResult = this.random.GetInt(cellRun.length);\r\n              if (\r\n                cellRun[randResult].adjacentCells[this.props.windDirection] !==\r\n                undefined\r\n              ) {\r\n                this.MergeCells(\r\n                  cellRun[randResult],\r\n                  cellRun[randResult].adjacentCells[this.props.windDirection]\r\n                );\r\n              }\r\n              cellRun = [];\r\n            } else {\r\n              this.MergeCells(\r\n                this.grid.cells[i][j],\r\n                this.grid.cells[i][j].adjacentCells[this.props.sideDirection]\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      cellRun = [];\r\n    }\r\n\r\n    //N and S\r\n    else {\r\n      for (\r\n        let i: number = iStart;\r\n        iStart === 0 ? i < iMax : i >= iMax;\r\n        i += iStep\r\n      ) {\r\n        for (\r\n          let j: number = jStart;\r\n          jStart === 0 ? j < jMax : j >= jMax;\r\n          j += jStep\r\n        ) {\r\n          if (this.baseProps.numCellSides === 4) {\r\n            cellRun.push(this.grid.cells[i][j]);\r\n            randResult = this.random.GetInt(100);\r\n\r\n            if (\r\n              this.grid.cells[i][j].adjacentCells[this.props.sideDirection] ===\r\n                undefined ||\r\n              (this.grid.cells[i][j].adjacentCells[this.props.windDirection] !==\r\n                undefined &&\r\n                randResult < this.props.chanceWind)\r\n            ) {\r\n              randResult = this.random.GetInt(cellRun.length);\r\n              if (\r\n                cellRun[randResult].adjacentCells[this.props.windDirection] !==\r\n                undefined\r\n              ) {\r\n                this.MergeCells(\r\n                  cellRun[randResult],\r\n                  cellRun[randResult].adjacentCells[this.props.windDirection]\r\n                );\r\n              }\r\n              cellRun = [];\r\n            } else {\r\n              this.MergeCells(\r\n                this.grid.cells[i][j],\r\n                this.grid.cells[i][j].adjacentCells[this.props.sideDirection]\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      cellRun = [];\r\n    }\r\n  }\r\n}\r\n","import { Cell } from '../';\r\nimport { Generator, GeneratorData } from './generator';\r\n\r\nexport class WilsonData {\r\n  direction: number;\r\n  chanceVertical: number;\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class Wilson extends Generator {\r\n  props: WilsonData;\r\n\r\n  constructor(baseProps: GeneratorData, props: WilsonData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let currentLoop: Cell[] = []; //functions as stack\r\n    let currentCell: Cell;\r\n    let adjacentCount: number;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    mapCells[this.random.GetInt(mapCells.length)].visited = true;\r\n    do {\r\n      currentLoop = [];\r\n      let unvisitedCount = mapCells.filter((a) => !a.visited).length;\r\n      currentCell = mapCells.filter((a) => !a.visited)[\r\n        this.random.GetInt(unvisitedCount)\r\n      ];\r\n      currentLoop.push(currentCell);\r\n      while (!currentCell.visited) {\r\n        adjacentCount = currentCell.adjacentCells.filter(\r\n          (a) => a !== undefined\r\n        ).length;\r\n        currentCell = currentCell.adjacentCells.filter((a) => a !== undefined)[\r\n          this.random.GetInt(adjacentCount)\r\n        ] as Cell;\r\n        let x = currentCell.x,\r\n          y = currentCell.y;\r\n        if (currentLoop.some((a) => a.x === x && a.y === y)) {\r\n          while (\r\n            currentLoop[currentLoop.length - 1].x !== x ||\r\n            currentLoop[currentLoop.length - 1].y !== y\r\n          ) {\r\n            currentLoop.pop();\r\n          }\r\n          currentCell = currentLoop[currentLoop.length - 1];\r\n        } else {\r\n          currentLoop.push(currentCell);\r\n        }\r\n      }\r\n\r\n      for (let i: number = 0; i < currentLoop.length - 1; i++) {\r\n        this.MergeCells(currentLoop[i], currentLoop[i + 1]);\r\n        currentLoop[i].visited = true;\r\n      }\r\n      currentLoop[currentLoop.length - 1].visited = true;\r\n    } while (mapCells.some((a) => !a.visited));\r\n  }\r\n}\r\n","import { Cell } from '../';\r\n\r\nexport class MathUtils {\r\n  public static MaxX(mapCells: Cell[]): number {\r\n    let retVal: number = -Infinity;\r\n    for (let i: number = 0; i < mapCells.length; i++) {\r\n      retVal = mapCells[i].x > retVal ? mapCells[i].x : retVal;\r\n    }\r\n    return retVal;\r\n  }\r\n\r\n  public static MinX(mapCells: Cell[]): number {\r\n    let retVal: number = Infinity;\r\n    for (let i: number = 0; i < mapCells.length; i++) {\r\n      retVal = mapCells[i].x < retVal ? mapCells[i].x : retVal;\r\n    }\r\n    return retVal;\r\n  }\r\n\r\n  public static MaxY(mapCells: Cell[]): number {\r\n    let retVal: number = -Infinity;\r\n    for (let i: number = 0; i < mapCells.length; i++) {\r\n      retVal = mapCells[i].y > retVal ? mapCells[i].y : retVal;\r\n    }\r\n    return retVal;\r\n  }\r\n\r\n  public static MinY(mapCells: Cell[]): number {\r\n    let retVal: number = Infinity;\r\n    for (let i: number = 0; i < mapCells.length; i++) {\r\n      retVal = mapCells[i].y < retVal ? mapCells[i].y : retVal;\r\n    }\r\n    return retVal;\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Generator, GeneratorData } from './generator';\r\nimport { MathUtils } from '../utils/math';\r\n\r\nexport class EllerData {\r\n  direction: number;\r\n  chanceVertical: number;\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class Eller extends Generator {\r\n  props: EllerData;\r\n\r\n  constructor(baseProps: GeneratorData, props: EllerData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n    let currentRow: Cell[] = [];\r\n    let currentRowSet: Cell[] = [];\r\n    let row: number;\r\n    let finalRow: number;\r\n    let currentSet: number = 1;\r\n    let currentRowSets: number[] = [];\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    row = MathUtils.MaxY(mapCells);\r\n    finalRow = MathUtils.MinY(mapCells);\r\n\r\n    do {\r\n      currentRow = mapCells.filter((a) => a.y === row);\r\n      currentRow.forEach((a) => {\r\n        if (a.set === 0) {\r\n          a.set = currentSet;\r\n          currentSet++;\r\n        }\r\n      });\r\n\r\n      for (let i: number = 0; i < currentRow.length; i++) {\r\n        if (\r\n          currentRow[i].adjacentCells[3] !== undefined &&\r\n          (currentRow[i].adjacentCells[3] as Cell).set !== currentRow[i].set\r\n        ) {\r\n          if (this.random.GetInt(2) === 0) {\r\n            this.MergeCells(currentRow[i], currentRow[i].adjacentCells[3]);\r\n            currentRowSet = mapCells.filter(\r\n              (a) => a.set === (currentRow[i].adjacentCells[3] as Cell).set\r\n            );\r\n            for (let j: number = 0; j < currentRowSet.length; j++) {\r\n              currentRowSet[j].set = currentRow[i].set;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      currentRowSets = [];\r\n      for (let i: number = 0; i < currentRow.length; i++) {\r\n        if (currentRowSets.indexOf(currentRow[i].set) === -1) {\r\n          currentRowSets.push(currentRow[i].set);\r\n        }\r\n      }\r\n\r\n      for (let i: number = 0; i < currentRowSets.length; i++) {\r\n        currentRowSet = currentRow.filter((a) => a.set === currentRowSets[i]);\r\n        let rowMovedSouth: boolean = false;\r\n        for (let j: number = 0; j < currentRowSet.length; j++) {\r\n          if (\r\n            currentRowSet[j].adjacentCells[2] !== undefined &&\r\n            (currentRowSet[j].adjacentCells[2] as Cell).set !==\r\n              currentRowSet[j].set\r\n          ) {\r\n            if (this.random.GetInt(3) === 0) {\r\n              rowMovedSouth = true;\r\n              this.MergeCells(\r\n                currentRowSet[j],\r\n                currentRowSet[j].adjacentCells[2]\r\n              );\r\n              (currentRowSet[j].adjacentCells[2] as Cell).set =\r\n                currentRowSet[j].set;\r\n            }\r\n          }\r\n        }\r\n        if (!rowMovedSouth) {\r\n          for (let j: number = 0; j < currentRowSet.length; j++) {\r\n            if (\r\n              !rowMovedSouth &&\r\n              currentRowSet[j].adjacentCells[2] !== undefined &&\r\n              (currentRowSet[j].adjacentCells[2] as Cell).set !==\r\n                currentRowSet[j].set\r\n            ) {\r\n              rowMovedSouth = true;\r\n              this.MergeCells(\r\n                currentRowSet[j],\r\n                currentRowSet[j].adjacentCells[2]\r\n              );\r\n              (currentRowSet[j].adjacentCells[2] as Cell).set =\r\n                currentRowSet[j].set;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      row--;\r\n    } while (row >= finalRow);\r\n\r\n    for (let i: number = 0; i < currentRow.length; i++) {\r\n      if (\r\n        currentRow[i].adjacentCells[3] !== undefined &&\r\n        (currentRow[i].adjacentCells[3] as Cell).set !== currentRow[i].set\r\n      ) {\r\n        this.MergeCells(currentRow[i], currentRow[i].adjacentCells[3]);\r\n        currentRowSet = mapCells.filter(\r\n          (a) => a.set === (currentRow[i].adjacentCells[3] as Cell).set\r\n        );\r\n        for (let j: number = 0; j < currentRowSet.length; j++) {\r\n          currentRowSet[j].set = currentRow[i].set;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Cell } from '../maze-parts/cell';\r\nimport { Generator, GeneratorData } from './generator';\r\nimport { MathUtils } from '../utils/math';\r\n\r\nexport class RecursiveSubdivisionData {\r\n  direction: number;\r\n  chanceVertical: number;\r\n\r\n  constructor() {\r\n    this.direction = 1;\r\n    this.chanceVertical = 50;\r\n  }\r\n}\r\n\r\nexport class RecursiveSubdivision extends Generator {\r\n  props: RecursiveSubdivisionData;\r\n\r\n  constructor(baseProps: GeneratorData, props: RecursiveSubdivisionData) {\r\n    super(baseProps);\r\n    this.props = props;\r\n  }\r\n\r\n  Generate(): void {\r\n    let mapCells: Cell[] = [];\r\n\r\n    let startX: number, startY: number, startWidth: number, startHeight: number;\r\n\r\n    for (let i: number = 0; i < this.baseProps.width; i++) {\r\n      for (let j: number = 0; j < this.baseProps.height; j++) {\r\n        if (!this.grid.cells[i][j].masked) {\r\n          mapCells.push(this.grid.cells[i][j]);\r\n          for (let k: number = 0; k < this.grid.numCellSides; k++) {\r\n            if (this.grid.cells[i][j].adjacentCells[k] !== undefined) {\r\n              this.grid.cells[i][j].SetWall(k, false);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    startX = MathUtils.MinX(mapCells);\r\n    startY = MathUtils.MinY(mapCells);\r\n    startWidth = MathUtils.MaxX(mapCells) - startX + 1;\r\n    startHeight = MathUtils.MaxY(mapCells) - startY + 1;\r\n\r\n    //alert(startX + ', ' + startY + ', ' + startWidth + ', ' + startHeight);\r\n    this.divide(mapCells, startX, startY, startHeight, startWidth);\r\n  }\r\n\r\n  private divide(\r\n    mapCells: Cell[],\r\n    row: number,\r\n    column: number,\r\n    height: number,\r\n    width: number\r\n  ): void {\r\n    if (height > 1 || width > 1) {\r\n      if (height > width) {\r\n        this.divideHorizontal(mapCells, row, column, height, width);\r\n      } else {\r\n        this.divideVertical(mapCells, row, column, height, width);\r\n      }\r\n    }\r\n  }\r\n\r\n  private divideHorizontal(\r\n    mapCells: Cell[],\r\n    row: number,\r\n    column: number,\r\n    height: number,\r\n    width: number\r\n  ): void {\r\n    let divideSouthOf: number = this.random.GetInt(height - 1);\r\n    //alert('south: ' + divideSouthOf);\r\n    let affectedCells: Cell[] = mapCells\r\n      .filter(\r\n        (a) =>\r\n          a.y === row + divideSouthOf && a.x >= column && a.x < column + width\r\n      )\r\n      .sort((a, b) => this.compareElement(a, b, 'x'));\r\n    if (\r\n      affectedCells.length > 0 &&\r\n      affectedCells.some((a) => a.adjacentCells[0] !== undefined)\r\n    ) {\r\n      affectedCells.forEach((a) => {\r\n        if (a.adjacentCells[0] !== undefined) {\r\n          a.SetWall(0, true);\r\n          a.adjacentCells[0].SetWall(2, true);\r\n        }\r\n      });\r\n\r\n      if (row + divideSouthOf < MathUtils.MaxY(mapCells)) {\r\n        let passageCell: number = -1;\r\n        let affectedCellSection: Cell[] = [];\r\n        for (let i: number = 0; i < affectedCells.length; i++) {\r\n          if (\r\n            affectedCellSection.length === 0 ||\r\n            MathUtils.MaxX(affectedCellSection) - affectedCells[i].x === -1\r\n          ) {\r\n            affectedCellSection.push(affectedCells[i]);\r\n          } else {\r\n            if (\r\n              affectedCellSection.some((a) => a.adjacentCells[0] !== undefined)\r\n            ) {\r\n              do {\r\n                passageCell = this.random.GetInt(affectedCellSection.length);\r\n              } while (\r\n                affectedCellSection[passageCell].adjacentCells[0] === undefined\r\n              );\r\n              this.MergeCells(\r\n                affectedCellSection[passageCell],\r\n                affectedCellSection[passageCell].adjacentCells[0]\r\n              );\r\n              affectedCellSection = [];\r\n            }\r\n          }\r\n        }\r\n\r\n        if (affectedCellSection.some((a) => a.adjacentCells[0] !== undefined)) {\r\n          do {\r\n            passageCell = this.random.GetInt(affectedCellSection.length);\r\n          } while (\r\n            affectedCellSection[passageCell].adjacentCells[0] === undefined\r\n          );\r\n          this.MergeCells(\r\n            affectedCellSection[passageCell],\r\n            affectedCellSection[passageCell].adjacentCells[0]\r\n          );\r\n        }\r\n      }\r\n\r\n      this.divide(mapCells, row, column, divideSouthOf + 1, width);\r\n      this.divide(\r\n        mapCells,\r\n        row + divideSouthOf + 1,\r\n        column,\r\n        height - divideSouthOf - 1,\r\n        width\r\n      );\r\n    }\r\n  }\r\n\r\n  private divideVertical(\r\n    mapCells: Cell[],\r\n    row: number,\r\n    column: number,\r\n    height: number,\r\n    width: number\r\n  ): void {\r\n    let divideEastOf: number = this.random.GetInt(width - 1);\r\n    //alert('east: ' + divideEastOf);\r\n    let affectedCells: Cell[] = mapCells\r\n      .filter(\r\n        (a) => a.x === column + divideEastOf && a.y >= row && a.y < row + height\r\n      )\r\n      .sort((a, b) => this.compareElement(a, b, 'y'));\r\n    if (\r\n      affectedCells.length > 0 &&\r\n      affectedCells.some((a) => a.adjacentCells[1] !== undefined)\r\n    ) {\r\n      affectedCells.forEach((a) => {\r\n        if (a.adjacentCells[1] !== undefined) {\r\n          a.SetWall(1, true);\r\n          a.adjacentCells[1].SetWall(3, true);\r\n        }\r\n      });\r\n\r\n      if (column + divideEastOf < MathUtils.MaxX(mapCells)) {\r\n        let passageCell: number = -1;\r\n        let affectedCellSection: Cell[] = [];\r\n        for (let i: number = 0; i < affectedCells.length; i++) {\r\n          if (\r\n            affectedCellSection.length === 0 ||\r\n            MathUtils.MaxY(affectedCellSection) - affectedCells[i].y === -1\r\n          ) {\r\n            affectedCellSection.push(affectedCells[i]);\r\n          } else {\r\n            if (\r\n              affectedCellSection.some((a) => a.adjacentCells[1] !== undefined)\r\n            ) {\r\n              do {\r\n                passageCell = this.random.GetInt(affectedCellSection.length);\r\n              } while (\r\n                affectedCellSection[passageCell].adjacentCells[1] === undefined\r\n              );\r\n              this.MergeCells(\r\n                affectedCellSection[passageCell],\r\n                affectedCellSection[passageCell].adjacentCells[1]\r\n              );\r\n              affectedCellSection = [];\r\n            }\r\n          }\r\n        }\r\n\r\n        if (affectedCellSection.some((a) => a.adjacentCells[1] !== undefined)) {\r\n          do {\r\n            passageCell = this.random.GetInt(affectedCellSection.length);\r\n          } while (\r\n            affectedCellSection[passageCell].adjacentCells[1] === undefined\r\n          );\r\n          this.MergeCells(\r\n            affectedCellSection[passageCell],\r\n            affectedCellSection[passageCell].adjacentCells[1]\r\n          );\r\n        }\r\n      }\r\n\r\n      this.divide(mapCells, row, column, height, divideEastOf + 1);\r\n      this.divide(\r\n        mapCells,\r\n        row,\r\n        column + divideEastOf + 1,\r\n        height,\r\n        width - divideEastOf - 1\r\n      );\r\n    }\r\n  }\r\n\r\n  private compareElement<Type, Key extends keyof Type>(\r\n    a: Type,\r\n    b: Type,\r\n    key: Key\r\n  ): number {\r\n    return a[key] === b[key] ? 0 : a[key] < b[key] ? -1 : 1;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Heading,\r\n  Text,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Center,\r\n} from '@chakra-ui/react';\r\nimport { Canvas } from '../../../../lib/components/canvas';\r\nimport { GeneratorProperties } from './components/generator-properties';\r\nimport { BinaryTreeProperties } from './components/binary-tree-properties';\r\nimport { SidewinderProperties } from './components/sidewinder-properties';\r\n\r\nimport {\r\n  Generator as MazeGenerator,\r\n  GeneratorData,\r\n  BinaryTree,\r\n  BinaryTreeData,\r\n  Sidewinder,\r\n  SidewinderData,\r\n  Image,\r\n  AldousBroder,\r\n  AldousBroderData,\r\n  Wilson,\r\n  WilsonData,\r\n  HuntAndKill,\r\n  HuntAndKillData,\r\n  RecursiveBacktracker,\r\n  RecursiveBacktrackerData,\r\n  Prim,\r\n  PrimData,\r\n  Kruskal,\r\n  KruskalData,\r\n  GrowingTree,\r\n  GrowingTreeData,\r\n  Eller,\r\n  EllerData,\r\n  RecursiveSubdivision,\r\n  RecursiveSubdivisionData,\r\n} from '../../../../lib/mazes';\r\n\r\ninterface IGeneratorState {\r\n  imgData: Image;\r\n  generatorData: GeneratorData;\r\n  binaryTree: BinaryTreeData;\r\n  sidewinder: SidewinderData;\r\n  aldousBroder: AldousBroderData;\r\n  wilson: WilsonData;\r\n  huntAndKill: HuntAndKillData;\r\n  recursiveBacktracker: RecursiveBacktrackerData;\r\n  kruskal: KruskalData;\r\n  prim: PrimData;\r\n  growingTree: GrowingTreeData;\r\n  eller: EllerData;\r\n  recursiveSubdivision: RecursiveSubdivisionData;\r\n}\r\n\r\nexport class Generator extends React.Component<any, IGeneratorState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      imgData: new Image(1, 1),\r\n      generatorData: new GeneratorData(),\r\n      binaryTree: new BinaryTreeData(),\r\n      sidewinder: new SidewinderData(),\r\n      aldousBroder: new AldousBroderData(),\r\n      wilson: new WilsonData(),\r\n      huntAndKill: new HuntAndKillData(),\r\n      recursiveBacktracker: new RecursiveBacktrackerData(),\r\n      kruskal: new KruskalData(),\r\n      prim: new PrimData(),\r\n      growingTree: new GrowingTreeData(),\r\n      eller: new EllerData(),\r\n      recursiveSubdivision: new RecursiveSubdivisionData(),\r\n    };\r\n\r\n    this.handleGeneratorDataChange = this.handleGeneratorDataChange.bind(this);\r\n    this.handleBinaryTreeChange = this.handleBinaryTreeChange.bind(this);\r\n    this.handleSidewinderChange = this.handleSidewinderChange.bind(this);\r\n  }\r\n\r\n  generate = () => {\r\n    let maze: MazeGenerator;\r\n    const {\r\n      binaryTree,\r\n      sidewinder,\r\n      aldousBroder,\r\n      wilson,\r\n      huntAndKill,\r\n      recursiveBacktracker,\r\n      kruskal,\r\n      prim,\r\n      growingTree,\r\n      eller,\r\n      recursiveSubdivision,\r\n      generatorData,\r\n    } = this.state;\r\n\r\n    switch (generatorData.generator) {\r\n      case 1:\r\n        maze = new BinaryTree(generatorData, binaryTree);\r\n        break;\r\n      case 2:\r\n        maze = new Sidewinder(generatorData, sidewinder);\r\n        break;\r\n      case 3:\r\n        maze = new AldousBroder(generatorData, aldousBroder);\r\n        break;\r\n      case 4:\r\n        maze = new Wilson(generatorData, wilson);\r\n        break;\r\n      case 5:\r\n        maze = new HuntAndKill(generatorData, huntAndKill);\r\n        break;\r\n      case 6:\r\n        maze = new RecursiveBacktracker(generatorData, recursiveBacktracker);\r\n        break;\r\n      case 7:\r\n        maze = new Kruskal(generatorData, kruskal);\r\n        break;\r\n      case 8:\r\n        maze = new Prim(generatorData, prim);\r\n        break;\r\n      case 9:\r\n        maze = new GrowingTree(generatorData, growingTree);\r\n        break;\r\n      case 10:\r\n        maze = new Eller(generatorData, eller);\r\n        break;\r\n      case 11:\r\n        maze = new RecursiveSubdivision(generatorData, recursiveSubdivision);\r\n        break;\r\n      default:\r\n        maze = new BinaryTree(generatorData, binaryTree);\r\n        break;\r\n    }\r\n\r\n    maze.RunGenerator();\r\n    this.setState({ imgData: maze.Display(64) });\r\n  };\r\n\r\n  handleGeneratorDataChange(fieldName: string, value: number) {\r\n    let generatorData = this.state.generatorData;\r\n\r\n    switch (fieldName) {\r\n      case 'generator':\r\n        generatorData.generator = value;\r\n        break;\r\n      case 'seed':\r\n        generatorData.seed = value;\r\n        break;\r\n      case 'width':\r\n        generatorData.width = value;\r\n        break;\r\n      case 'height':\r\n        generatorData.height = value;\r\n        break;\r\n    }\r\n\r\n    this.setState({ generatorData: generatorData });\r\n  }\r\n\r\n  getGeneratorPropertiesTabName(): string {\r\n    let retVal: string = '';\r\n    switch (this.state.generatorData.generator) {\r\n      case 1:\r\n        retVal = 'Binary Tree';\r\n        break;\r\n      case 2:\r\n        retVal = 'Sidewinder';\r\n        break;\r\n      case 3:\r\n        retVal = 'Aldous-Broder';\r\n        break;\r\n      case 4:\r\n        retVal = \"Wilson's\";\r\n        break;\r\n      case 5:\r\n        retVal = 'Hunt and Kill';\r\n        break;\r\n      case 6:\r\n        retVal = 'Recursive Backtracker';\r\n        break;\r\n      case 7:\r\n        retVal = \"Kruskal's\";\r\n        break;\r\n      case 8:\r\n        retVal = \"Prims's\";\r\n        break;\r\n      case 9:\r\n        retVal = 'Growing Tree';\r\n        break;\r\n      case 10:\r\n        retVal = \"Eller's\";\r\n        break;\r\n      case 11:\r\n        retVal = 'Recursive Subdivision';\r\n        break;\r\n    }\r\n    return retVal;\r\n  }\r\n\r\n  handleBinaryTreeChange(fieldName: string, value: number) {\r\n    let binaryTree = this.state.binaryTree;\r\n\r\n    switch (fieldName) {\r\n      case 'directions':\r\n        binaryTree.direction = value;\r\n        break;\r\n      case 'chanceVertical':\r\n        binaryTree.chanceVertical = value;\r\n        break;\r\n    }\r\n\r\n    this.setState({ binaryTree: binaryTree });\r\n  }\r\n  handleSidewinderChange(fieldName: string, value: number) {\r\n    let sidewinder = this.state.sidewinder;\r\n\r\n    switch (fieldName) {\r\n      case 'sideDirection':\r\n        sidewinder.sideDirection = value;\r\n        break;\r\n      case 'windDirection':\r\n        sidewinder.windDirection = value;\r\n        break;\r\n      case 'chanceVertical':\r\n        sidewinder.chanceWind = value;\r\n        break;\r\n    }\r\n\r\n    this.setState({ sidewinder: sidewinder });\r\n  }\r\n\r\n  getGeneratorSpecificPropertiesElement(): JSX.Element {\r\n    let retElement = <></>;\r\n\r\n    if (this.state.generatorData.generator === 1) {\r\n      retElement = (\r\n        <BinaryTreeProperties\r\n          data={this.state.binaryTree}\r\n          handleChange={this.handleBinaryTreeChange}\r\n        />\r\n      );\r\n    } else if (this.state.generatorData.generator === 2) {\r\n      retElement = (\r\n        <SidewinderProperties\r\n          data={this.state.sidewinder}\r\n          handleChange={this.handleSidewinderChange}\r\n        />\r\n      );\r\n    }\r\n    return retElement;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box padding=\"1em\">\r\n        <Heading paddingBottom=\"0.5em\">Mazes - Generator</Heading>\r\n\r\n        <Container padding=\"1em\">\r\n          <Text textAlign=\"left\" padding=\"1em\">\r\n            <Tabs variant=\"enclosed\">\r\n              <TabList>\r\n                <Tab>General Properties</Tab>\r\n                <Tab>{this.getGeneratorPropertiesTabName()} Properties</Tab>\r\n              </TabList>\r\n              <TabPanels>\r\n                <TabPanel>\r\n                  <GeneratorProperties\r\n                    data={this.state.generatorData}\r\n                    handleChange={this.handleGeneratorDataChange}\r\n                  />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  {this.getGeneratorSpecificPropertiesElement()}\r\n                </TabPanel>\r\n              </TabPanels>\r\n            </Tabs>\r\n          </Text>\r\n          <Button onClick={() => this.generate()}>Generate</Button>\r\n        </Container>\r\n        <Container\r\n          maxWidth=\"container.lg\"\r\n          maxHeight=\"container.lg\"\r\n          textAlign=\"center\"\r\n          overflow=\"scroll\"\r\n          padding=\"1em\"\r\n        >\r\n          <Center>\r\n            <Canvas id=\"mazeCanvas\" imgData={this.state.imgData}></Canvas>\r\n          </Center>\r\n        </Container>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nexport const Algorithms: React.FC = () => {\r\n  return (\r\n    <Box padding=\"1em\">\r\n      <Heading paddingBottom=\"0.5em\">Mazes - Algorithms</Heading>\r\n\r\n      <Text>Texty text.</Text>\r\n    </Box>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { LayoutMain } from './layout-main';\r\nimport { Home } from '../home/home';\r\nimport { AboutMe } from '../about-me/about-me';\r\nimport { Programming } from '../programming/programming';\r\nimport { Mazes } from '../programming/mazes/overview/mazes';\r\nimport { TerrainGeneration } from '../programming/terrain-generation/terrain-generation';\r\nimport { Writing } from '../writing/writing';\r\nimport { Generator } from '../programming/mazes/generator/generator';\r\nimport { Algorithms } from '../programming/mazes/algorithms/algorithms';\r\n\r\nexport const RouterMain: React.FC = () => {\r\n  return (\r\n    <LayoutMain>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route exact path=\"/about-me\" component={AboutMe} />\r\n\r\n      <Route exact path=\"/programming\" component={Programming} />\r\n      <Route exact path=\"/programming/mazes\" component={Mazes} />\r\n      <Route exact path=\"/programming/mazes/generator\" component={Generator} />\r\n      <Route\r\n        exact\r\n        path=\"/programming/mazes/algorithms\"\r\n        component={Algorithms}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/programming/terrain-generation\"\r\n        component={TerrainGeneration}\r\n      />\r\n      <Route exact path=\"/writing\" component={Writing} />\r\n    </LayoutMain>\r\n  );\r\n};\r\n","import * as React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nimport { RouterMain } from './site/router/router-main';\nimport { BrowserRouter } from 'react-router-dom';\n\nexport const App = () => (\n  <BrowserRouter>\n    <ChakraProvider theme={theme}>\n      <RouterMain />\n    </ChakraProvider>\n  </BrowserRouter>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}